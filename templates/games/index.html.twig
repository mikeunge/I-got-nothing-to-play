{% extends 'base.html.twig' %}

{% block title %}Games | IGN2P{% endblock %}

{% block body %}

	<div class="flex flex-row justify-between border-b-2 pb-4 py-2 px-4">
		<a href="{{ path('homepage') }}">
			<img src="{{ asset('/images/logo.png') }}" alt="LOGO" class="h-8 w-auto mr-2">
		</a>
		<label class="relative block">
			<span class="sr-only">Search</span>
			<span class="absolute inset-y-0 left-0 flex items-center pl-2">
				<svg class="h-5 w-5 fill-gray-300" viewBox="0 0 20 20"></svg>
			</span>
			<input class="placeholder:italic placeholder:text-gray-400 block bg-white w-full border border-gray-300 rounded-md py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-purple-300 focus:ring-purple-500 focus:ring-1 sm:text-sm" placeholder="Search for games..." type="text" name="search"/>
		</label>
		<a class="btn" href="{{ path('games_new') }}">Add Game</a>
	</div>

	<div class="flex justify-center md:justify-start text-4xl pt-4">
		Your Library
	</div>

	<div class="pt-8">
		{% if games %}	
			{# Check if we have less than 3 elements for the grid, modify the grid layout accordingly #}
			{% if games|length < 3 %}
				<div class="grid gap-4 grid-cols-1 md:grid-cols-2">
			{% else %}
				<div class="grid gap-4 grid-cols-1 md:grid-cols-3">
			{% endif %}
				{% for game in games %}
				<div class="flex flex-col w-full h-full md:h-3/4 border-2 border-gray-100 rounded-xl shadow-xl">
					<a class="h-1/2" href="{{ path('games_show', {'id': game.id}) }}">
						<img class="relative object-cover w-full h-full rounded-t-xl" src="{{ game.image }}" alt="Image not found" />
					</a>
					<div class="p-4">
						<div class="flex flex-row justify-between">
							<a href="{{ path('games_show', {'id': game.id}) }}">
								<div class="text-2xl link">
									{{ game.title }}
								</div>
							</a>
							<div class="text-gray-600 mt-1.5">
								<a class="material-icons pr-2 hover:scale-110" href="{{ path('games_show', {'id': game.id}) }}">open_in_new</a>
							</div>
						</div>
						<div class="game-description py-2 pt-4 text-gray-600 font-light break-words">
							{{ game.description }}
						</div>
					</div>
				</div>
				{% endfor %}
			</div>
		{% else %}
			<div class="flex flex-col text-center justify-center pt-28 md:pt-48">
				<div class="text-2xl md:text-4xl">(つ◉益◉)つ</div>
				<div class="text-3xl md:text-5xl pt-8">No records found</div>
				<div class="md:text-2xl pt-2 font-light text-gray-600">Add some games and then come back, it looks great, trust me.</div>
			</div>
		{% endif %}
	</div>

	<script>
	const cutDescription = (elements, maxLength) => {
		elements.forEach((elem) => {
			const html = elem.innerHTML.trim();
			if (html.trim().length > maxLength) {
				elem.innerHTML = html.substring(0, maxLength) + '...';
			}
		});
	}

	// Check for the screen size and adjust the textLength (textSize).
	const getTextSize = () => {
		// define the maxLength (-of the text) and the screenAndTextSizes.
		// the screenAndTextSizes array maps the MAX screen size with the text length to cut.
		let maxLength = 600;
		const screenAndTextSizes = [ [640, 300], [768, 250], [1024, 250], [1280, 300], [1536, 400] ];
		for (let sizes of screenAndTextSizes) {
			if (window.innerWidth <= sizes[0]) {
				maxLength = sizes[1];
				break;
			}
		}
		return maxLength;
	}

	// Get all the elements with the 'game-description' class in it.
	// We check if any exist and then cut the description accordingly.
	// After that, we add an eventlistener that checks for changes and updates the description size.
	const descriptions = document.querySelectorAll('.game-description');
	if (descriptions) {
		cutDescription(descriptions, getTextSize());
		window.addEventListener('resize', () => {
			cutDescription(descriptions, getTextSize());
		});
	}

	</script>

{% endblock %}
